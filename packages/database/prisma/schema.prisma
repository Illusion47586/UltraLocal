// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "./ERD.svg"
  includeRelationFromFields = true
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../../core/src/dto"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ACTUAL CONTENT

model Organization {
  id        String    @id @unique @default(cuid())
  name      String
  image     String?
  userId    String    @map("user_id")
  projects  Project[]
  users     User[]
  tags      Tag[]
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")
  groups    Group[]
  labels    Label[]
  content   Content[]

  @@map("organizations")
}

model Project {
  id             String           @unique @default(cuid())
  name           String
  isPublished    Boolean          @default(false)
  groups         Group[]
  TagsOnProjects TagsOnProjects[]
  createdAt      DateTime?        @default(now()) @map("created_at")
  updatedAt      DateTime?        @default(now()) @updatedAt @map("updated_at")
  Organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String           @map("organization_id")

  @@id([id, name, organizationId])
  @@map("projects")
}

model Group {
  id             String         @id @unique @default(cuid())
  name           String
  timing         Timing         @default(RUNTIME)
  subGroups      Group[]        @relation("children")
  labels         Label[]
  TagsOnGroups   TagsOnGroups[]
  Project        Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String?        @map("project_id")
  parentGroup    Group?         @relation("children", fields: [parentGroupId], references: [id], onDelete: Cascade)
  parentGroupId  String?        @map("parent_group_id")
  Organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String         @map("organization_id")
  createdAt      DateTime?      @default(now()) @map("created_at")
  updatedAt      DateTime?      @default(now()) @updatedAt @map("updated_at")

  @@map("groups")
}

model Label {
  id             String         @id @unique @default(cuid())
  title          String
  timing         Timing         @default(RUNTIME)
  contents       Content[]
  TagsOnLabels   TagsOnLabels[]
  Group          Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        String         @map("group_id")
  Organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String         @map("organization_id")
  createdAt      DateTime?      @default(now()) @map("created_at")
  updatedAt      DateTime?      @default(now()) @updatedAt @map("updated_at")

  @@map("labels")
}

model Content {
  id             String           @id @unique @default(cuid())
  language       String
  literal        String
  numberOfParams Int?             @default(0) @map("number_of_params")
  timing         Timing           @default(RUNTIME)
  Label          Label            @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId        String           @map("label_id")
  TagsOnContents TagsOnContents[]
  Organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String           @map("organization_id")
  createdAt      DateTime?        @default(now()) @map("created_at")
  updatedAt      DateTime?        @default(now()) @updatedAt @map("updated_at")

  @@map("contents")
}

model Tag {
  id             String           @id @unique @default(cuid())
  label          String           @unique
  description    String?
  color          String           @unique
  level          Level            @default(ORGANIZATION)
  Organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String           @map("organization_id")
  createdAt      DateTime?        @default(now()) @map("created_at")
  updatedAt      DateTime?        @default(now()) @updatedAt @map("updated_at")
  TagsOnProjects TagsOnProjects[]
  TagsOnGroups   TagsOnGroups[]
  TagsOnLabels   TagsOnLabels[]
  TagsOnContents TagsOnContents[]

  @@map("tags")
}

// JOINS

model TagsOnProjects {
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([projectId, tagId])
}

model TagsOnGroups {
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([groupId, tagId])
}

model TagsOnLabels {
  label   Label  @relation(fields: [labelId], references: [id])
  labelId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([labelId, tagId])
}

model TagsOnContents {
  content   Content @relation(fields: [contentId], references: [id])
  contentId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([contentId, tagId])
}

// ENUMS

enum Timing {
  RUNTIME
  COMPILETIME
}

enum Level {
  ORGANIZATION
  PROJECT
  GROUP
  LABEL
  CONTENT
}

// AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  image          String?
  isAdmin        Boolean       @default(false) @map("is_admin")
  accounts       Account[]
  sessions       Session[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
