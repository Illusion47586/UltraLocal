{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":";AAAA,OAAO,aAAa;AACpB,IAAM,EAAE,SAAS,WAAW,QAAQ,UAAU,MAAM,IAAI,QAAQ;AAMhE,IAAM,4BAA4B,CAAC,cACjC;AAAA,EACE,SAAS,EAAE,KAAK,KAAK,CAAC;AAAA,EACtB,UAAU;AAAA,IACR,QAAQ;AAAA,EACV,CAAC;AAAA,EACD,MAAM;AAAA,EACN;AAAA,IACE,CAAC,SACC,IAAI,KAAK,cAAc,aAAa,KAAK,UAAU,KAAK;AAAA,EAC5D;AACF;AAEK,IAAM,eACX,OAAO,gBACP,QAAQ,aAAa;AAAA,EACnB,QAAQ,0BAA0B,QAAQ;AAAA,EAC1C,YAAY,CAAC,IAAI,QAAQ,WAAW,QAAQ,CAAC;AAC/C,CAAC;AAEH,IAAI,QAAQ,IAAI,aAAa;AAAc,SAAO,eAAe","sourcesContent":["import winston from \"winston\";\nconst { combine, timestamp, printf, colorize, align } = winston.format;\n\ndeclare global {\n  var prismaLogger: winston.Logger | undefined;\n}\n\nconst getFormatBasedOnNameSpace = (namespace: string) =>\n  combine(\n    colorize({ all: true }),\n    timestamp({\n      format: \"YYYY-MM-DD hh:mm:ss.SSS A\",\n    }),\n    align(),\n    printf(\n      (info) =>\n        `[${info.timestamp}] ${namespace} ${info.level}: ${info.message}`\n    )\n  );\n\nexport const prismaLogger =\n  global.prismaLogger ||\n  winston.createLogger({\n    format: getFormatBasedOnNameSpace(\"prisma\"),\n    transports: [new winston.transports.Console()],\n  });\n\nif (process.env.NODE_ENV !== \"production\") global.prismaLogger = prismaLogger;\n"]}